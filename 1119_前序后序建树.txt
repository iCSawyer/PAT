#include<bits/stdc++.h>

using namespace std;

const int N = 110;
struct node {
    int key;
    node *lchild = NULL;
    node *rchild = NULL;
};
int n, pre[N], post[N], num = 0;
bool flag = true;

node *create(int preL, int preR, int postL, int postR) {
    if (preL > preR) return NULL;

    node *root = new node;
    root->key = pre[preL];

    int k, num;
    for (k = preL + 1; k <= preR; k++) {
        if (pre[k] == post[postR - 1]) break;
    }
    num = k - preL - 1; //左子树的结点个数

    if (preL == preR) { // 如果是根结点，说明两颗子树都没有，需要特判
        return root;
    } else if (k == preL + 1) { // 有且只有一棵子树
        flag = false;
        root->rchild = create(k, preR, postL + num, postR - 1);
    } else { // 有两棵子树
        root->lchild = create(preL + 1, k - 1, postL, postL + num - 1);
        root->rchild = create(k, preR, postL + num, postR - 1);
    }
    return root;
}

void inOrder(node *root) {
    if (root == NULL) return;
    inOrder(root->lchild);
    printf("%d%s", root->key, num++ == n - 1 ? "\n" : " ");
    inOrder(root->rchild);
}

int main() {
    node *root = NULL;
    cin >> n;
    for (int i = 0; i < n; i++) cin >> pre[i];
    for (int i = 0; i < n; i++) cin >> post[i];
    root = create(0, n - 1, 0, n - 1);
    if (flag) cout << "Yes\n";
    else cout << "No\n";
    inOrder(root);
    return 0;
}